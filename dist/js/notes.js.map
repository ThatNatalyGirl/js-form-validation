{"version":3,"sources":["notes.js"],"names":["regularFunctionGlobalScope","console","log","arrowFunctionGlobalScope","ExampleModule","regularFunctionInsideModule","arrowFunctionInsideModule","instanceOfExampleModule","$logo","document","querySelector","addEventListener"],"mappings":";;AAEA,IAAIA,6BAA6B,SAA7BA,0BAA6B,GAAW;AAC3C;AACA;AACA;AACA;AACAC,SAAQC,GAAR,CAAY,IAAZ;AACA,CAND;;AAQA,IAAIC,2BAA2B,SAA3BA,wBAA2B,GAAM;AACpC;AACA;AACA;AACAF,SAAQC,GAAR;AACA,CALD;;AASA,IAAIE,gBAAgB,SAAhBA,aAAgB,GAAY;AAAA;;AAE/B,KAAIC,8BAA8B,SAA9BA,2BAA8B,GAAW;AAC5C;AACA;AACA;AACA;AACAJ,UAAQC,GAAR,CAAY,IAAZ;AACA,EAND;AAOA,KAAII,4BAA4B,SAA5BA,yBAA4B,GAAM;AACrC;AACA;AACA;AACAL,UAAQC,GAAR,CAAY,KAAZ;AACA,EALD;AAMA,QAAO;AACNG,0DADM;AAENC;AAFM,EAAP;AAIA,CAnBD;AAoBA,IAAIC,0BAA0BH,eAA9B;;AAIA;AACA,IAAII,QAAQC,SAASC,aAAT,CAAuB,OAAvB,CAAZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACAF,MAAMG,gBAAN,CAAuB,OAAvB,EAAgCJ,wBAAwBD,yBAAxD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"notes.js","sourcesContent":["\n\nlet regularFunctionGlobalScope = function() {\n\t// A regular function gets it's _this_ automatically from its caller,\n\t// in this case, the event listener. \n\t// This is the default setup, and it's the simplest to understand.\n\t// In this example, _this_ is the HTML element that the event happened to (the image).\n\tconsole.log(this)\n}\n\nlet arrowFunctionGlobalScope = () => {\n\t// In an arrow function, _this_ comes from where the function is written.\n\t// In this example, _this_ is undefined because the function was defined in the global scope.\n\t// This is not very useful.\n\tconsole.log(this)\n}\n\n\n\nlet ExampleModule = function () {\n\t\n\tlet regularFunctionInsideModule = function() {\n\t\t// This example works the same as the regular function in the global scope.\n\t\t// It's _this_ will come from whereever it's called, in this case\n\t\t// the event listener. \n\t\t// Again, it will be the HTML image element that got the click event.\n\t\tconsole.log(this)\n\t};\n\tlet arrowFunctionInsideModule = () => {\n\t\t// This is an arrow function inside a module, where they start getting useful.\n\t\t// Because it's an arrow function, its _this_ comes from its own surroundings,\n\t\t// so in this case, _this_ is the instance of the ExampleModule itself.\n\t\tconsole.log(this)\n\t}\n\treturn {\n\t\tregularFunctionInsideModule, \n\t\tarrowFunctionInsideModule\n\t}\n}\nlet instanceOfExampleModule = ExampleModule()\n\n\n\n// ================== TESTS =================\nlet $logo = document.querySelector('.logo');\n// Uncomment these one at a time, and see how they differ\n\n// by default, _this_ is not assigned, so it's undefined. \n// console.log(this)\n\n// $logo.addEventListener('click', regularFunctionGlobalScope)\n// $logo.addEventListener('click', arrowFunctionGlobalScope)\n// $logo.addEventListener('click', instanceOfExampleModule.regularFunctionInsideModule)\n$logo.addEventListener('click', instanceOfExampleModule.arrowFunctionInsideModule)\n\n// Okay, here's where it gets really weird. Sometimes you don't want the _this_ to come from\n// either the function's context OR the caller's context. Sometimes you just want to call\n// a function and hand it a piece of data to use as _this_\n\n// The _bind_ function returns a reference to a modified version of the function it's called on, \n// with the new _this_ context bound to it. \n// $logo.addEventListener('click', instanceOfExampleModule.regularFunctionInsideModule.bind({customThis: 42}))\n\n// Alternatively, you can _call_ the function with the context applied to it.\n// $logo.addEventListener('click', function() {\n// \tinstanceOfExampleModule.regularFunctionInsideModule.call({customThis: 42})\n// })"]}